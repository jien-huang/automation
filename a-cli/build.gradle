plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'com.automation.java-application-conventions'
    id 'application'
    id 'java'
}

group = 'com.automationtest.cli'
version = '1.0'
sourceCompatibility = '11'

def user = "$System.env.USERNAME"
def pass = "$System.env.PASSWORD"
def imageTarget = "huangjien/instance"
def imageTag = project.findProperty('imageTag') ?: 'latest'

repositories {
    // Use JCenter for resolving dependencies.
    mavenCentral()
    jcenter()
}

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13'
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30'
    implementation project(':a-lib')
}

mainClassName = "com.automationtest.cli.App"

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes "Main-Class": "$mainClassName"
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

application {
    // Define the main class for the application.
    mainClass = 'com.automationtest.cli.App'
}

task tagRelease(type: Exec) {
    commandLine '/bin/sh', '-c', "git tag ${version}"
}

task dockerLogin(type: Exec){
    commandLine '/bin/sh', '-c', 'docker login -u ' + user + ' -p ' + pass
}

// Enable gradle to use property like -Dspring.profiles.active=dev
//bootRun {
//    systemProperties = System.properties
//}

task copyJar(type: Exec){
    commandLine '/bin/sh', '-c', "cp build/libs/${project.name}-${project.version}.jar build/libs/${project.name}.jar"
}

task createDockerImage(type: Exec){
    dependsOn 'copyJar'
    commandLine '/bin/sh', '-c', "docker build --squash -t ${imageTarget}:${project.version} ."
}

task tagDockerImage(type:Exec){
    dependsOn 'createDockerImage'
    commandLine '/bin/sh', '-c', "docker tag ${imageTarget}:${project.version} ${imageTarget}:${imageTag}"
}

task runLocally(type: Exec) {
//    dependsOn 'createDockerImage'
    commandLine "docker run -ti -p 8080:8080 --rm ${imageTarget}:${project.version} /opt/start.sh -u https://github.com/jien-huang/automation.git -b main -B firefox -s main.yml -i 0001 -r http://localhost:8080/upload-file "
}

task pushDockerImage(type: Exec){
    dependsOn 'tagDockerImage'
    commandLine '/bin/sh', '-c', "docker login -u ${user} -p ${pass} && docker push -a ${imageTarget}"
}